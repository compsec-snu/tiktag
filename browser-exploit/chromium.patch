diff --git a/media/base/async_destroy_video_encoder.h b/media/base/async_destroy_video_encoder.h
index 6b77a4cdde51b..1f7198f0c2248 100644
--- a/media/base/async_destroy_video_encoder.h
+++ b/media/base/async_destroy_video_encoder.h
@@ -66,6 +66,12 @@ class AsyncDestroyVideoEncoder final : public VideoEncoder {
     wrapped_encoder_->Flush(std::move(done_cb));
   }
 
+  unsigned long long getAddress() override {
+    LOG(ERROR) << base::StringPrintf("AsyncDestroyVideoEncoder::getAddress()");
+
+    return 0;
+  }
+
  private:
   std::unique_ptr<T> wrapped_encoder_;
 };
diff --git a/media/base/audio_buffer.cc b/media/base/audio_buffer.cc
index 8ff3df965640a..f9c26a6be3cc3 100644
--- a/media/base/audio_buffer.cc
+++ b/media/base/audio_buffer.cc
@@ -13,6 +13,7 @@
 #include "media/base/audio_bus.h"
 #include "media/base/limits.h"
 #include "media/base/timestamp_constants.h"
+#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"
 
 namespace media {
 
@@ -267,7 +268,10 @@ AudioBuffer::AudioBuffer(SampleFormat sample_format,
   }
 }
 
-AudioBuffer::~AudioBuffer() = default;
+AudioBuffer::~AudioBuffer() {
+    LOG(ERROR) << (String::Format("AudioBuffer free %p", this).Utf8());
+}
+ 
 
 std::unique_ptr<AudioBuffer::ExternalMemory> AudioBuffer::AllocateMemory(
     size_t size) {
diff --git a/media/base/video_encoder.h b/media/base/video_encoder.h
index ee540c1d87032..6aabe07477aea 100644
--- a/media/base/video_encoder.h
+++ b/media/base/video_encoder.h
@@ -197,6 +197,8 @@ class MEDIA_EXPORT VideoEncoder {
   // from the current one.
   virtual void DisablePostedCallbacks();
 
+  virtual unsigned long long getAddress() = 0;
+
  protected:
   template <typename Callback>
   Callback BindCallbackToCurrentLoopIfNeeded(Callback callback) {
diff --git a/media/video/alpha_video_encoder_wrapper.cc b/media/video/alpha_video_encoder_wrapper.cc
index 890794a44a68b..ce58d75beef7a 100644
--- a/media/video/alpha_video_encoder_wrapper.cc
+++ b/media/video/alpha_video_encoder_wrapper.cc
@@ -218,4 +218,8 @@ void AlphaVideoEncoderWrapper::AlphaOutputCallback(
   alpha_output_.emplace(std::move(output));
 }
 
+unsigned long long AlphaVideoEncoderWrapper::getAddress() {
+  return 0;
+}
+
 }  // namespace media
diff --git a/media/video/alpha_video_encoder_wrapper.h b/media/video/alpha_video_encoder_wrapper.h
index 1d0eba9008082..ef1b53653867c 100644
--- a/media/video/alpha_video_encoder_wrapper.h
+++ b/media/video/alpha_video_encoder_wrapper.h
@@ -43,6 +43,7 @@ class MEDIA_EXPORT AlphaVideoEncoderWrapper : public VideoEncoder {
                      OutputCB output_cb,
                      EncoderStatusCB done_cb) override;
   void Flush(EncoderStatusCB done_cb) override;
+  unsigned long long getAddress() override;
 
  private:
   void YuvOutputCallback(VideoEncoderOutput output,
diff --git a/media/video/av1_video_encoder.cc b/media/video/av1_video_encoder.cc
index 494d751a10367..593de6be3576b 100644
--- a/media/video/av1_video_encoder.cc
+++ b/media/video/av1_video_encoder.cc
@@ -722,6 +722,10 @@ void Av1VideoEncoder::Flush(EncoderStatusCB done_cb) {
   std::move(done_cb).Run(EncoderStatus::Codes::kOk);
 }
 
+unsigned long long Av1VideoEncoder::getAddress() {
+  return 0;
+}
+
 void Av1VideoEncoder::UpdateEncoderColorSpace() {
   auto aom_cs = VideoColorSpace::FromGfxColorSpace(last_frame_color_space_);
   if (aom_cs.primaries != VideoColorSpace::PrimaryID::INVALID) {
diff --git a/media/video/av1_video_encoder.h b/media/video/av1_video_encoder.h
index c67a7ae30a0e6..8ed35d2b9702e 100644
--- a/media/video/av1_video_encoder.h
+++ b/media/video/av1_video_encoder.h
@@ -38,6 +38,8 @@ class MEDIA_EXPORT Av1VideoEncoder : public VideoEncoder {
                      OutputCB output_cb,
                      EncoderStatusCB done_cb) override;
   void Flush(EncoderStatusCB done_cb) override;
+  unsigned long long getAddress() override;
+
 
  private:
   base::TimeDelta GetFrameDuration(const VideoFrame& frame);
diff --git a/media/video/offloading_video_encoder.cc b/media/video/offloading_video_encoder.cc
index d2fecca1fb933..fed261a0f5a6b 100644
--- a/media/video/offloading_video_encoder.cc
+++ b/media/video/offloading_video_encoder.cc
@@ -11,6 +11,7 @@
 #include "base/trace_event/trace_event.h"
 #include "media/base/video_frame.h"
 #include "media/video/video_encoder_info.h"
+#include "base/logging.h"
 
 namespace media {
 
@@ -91,6 +92,12 @@ OffloadingVideoEncoder::~OffloadingVideoEncoder() {
   work_runner_->DeleteSoon(FROM_HERE, std::move(wrapped_encoder_));
 }
 
+unsigned long long OffloadingVideoEncoder::getAddress() {
+  //LOG(ERROR) << base::StringPrintf("OffloadingVideoEncoder::getAddress()");
+
+  return wrapped_encoder_.get()->getAddress();
+}
+
 template <class T>
 T OffloadingVideoEncoder::WrapCallback(T cb) {
   DCHECK(callback_runner_);
diff --git a/media/video/offloading_video_encoder.h b/media/video/offloading_video_encoder.h
index 20a0e237cacea..03195a970218c 100644
--- a/media/video/offloading_video_encoder.h
+++ b/media/video/offloading_video_encoder.h
@@ -53,6 +53,8 @@ class MEDIA_EXPORT OffloadingVideoEncoder final : public VideoEncoder {
 
   void Flush(EncoderStatusCB done_cb) override;
 
+  unsigned long long getAddress() override;
+ 
  private:
   template <class T>
   T WrapCallback(T cb);
diff --git a/media/video/openh264_video_encoder.cc b/media/video/openh264_video_encoder.cc
index 0046b27aa2e80..38b565c68a90a 100644
--- a/media/video/openh264_video_encoder.cc
+++ b/media/video/openh264_video_encoder.cc
@@ -211,6 +211,9 @@ void OpenH264VideoEncoder::Initialize(VideoCodecProfile profile,
                       "Failed to create OpenH264 encoder."));
     return;
   }
+
+  LOG(ERROR) << Base::StringPrintf("raw_codec: %p %lx", raw_codec, sizeof(ISVCEncoder));
+  
   svc_encoder_unique_ptr codec(raw_codec, ISVCEncoderDeleter());
   raw_codec = nullptr;
 
@@ -513,6 +516,10 @@ void OpenH264VideoEncoder::Flush(EncoderStatusCB done_cb) {
   std::move(done_cb).Run(EncoderStatus::Codes::kOk);
 }
 
+unsigned long long OpenH264VideoEncoder::getAddress() {
+  return 0;
+}
+
 void OpenH264VideoEncoder::UpdateEncoderColorSpace() {
   auto itu_cs = VideoColorSpace::FromGfxColorSpace(last_frame_color_space_);
   if (!itu_cs.IsSpecified())
diff --git a/media/video/openh264_video_encoder.h b/media/video/openh264_video_encoder.h
index 08a145c878983..ea47087e3752f 100644
--- a/media/video/openh264_video_encoder.h
+++ b/media/video/openh264_video_encoder.h
@@ -36,6 +36,7 @@ class MEDIA_EXPORT OpenH264VideoEncoder : public VideoEncoder {
                      OutputCB output_cb,
                      EncoderStatusCB done_cb) override;
   void Flush(EncoderStatusCB done_cb) override;
+  unsigned long long getAddress() override;
 
  private:
   EncoderStatus DrainOutputs(const SFrameBSInfo& frame_info,
diff --git a/media/video/video_encode_accelerator_adapter.cc b/media/video/video_encode_accelerator_adapter.cc
index d469e1d4d3430..fdc284717f558 100644
--- a/media/video/video_encode_accelerator_adapter.cc
+++ b/media/video/video_encode_accelerator_adapter.cc
@@ -690,6 +690,11 @@ void VideoEncodeAcceleratorAdapter::Flush(EncoderStatusCB done_cb) {
       base::BindOnce(&VideoEncodeAcceleratorAdapter::FlushOnAcceleratorThread,
                      base::Unretained(this), WrapCallback(std::move(done_cb))));
 }
+  
+unsigned long long VideoEncodeAcceleratorAdapter::getAddress() {
+  LOG(ERROR) << base::StringPrintf("VideoEncodeAcceleratorAdapter::getAddress()");
+  return 0;
+}
 
 void VideoEncodeAcceleratorAdapter::FlushOnAcceleratorThread(
     EncoderStatusCB done_cb) {
diff --git a/media/video/video_encode_accelerator_adapter.h b/media/video/video_encode_accelerator_adapter.h
index 276b1a70105cf..9302d2f49164f 100644
--- a/media/video/video_encode_accelerator_adapter.h
+++ b/media/video/video_encode_accelerator_adapter.h
@@ -73,6 +73,7 @@ class MEDIA_EXPORT VideoEncodeAcceleratorAdapter
                      OutputCB output_cb,
                      EncoderStatusCB done_cb) override;
   void Flush(EncoderStatusCB done_cb) override;
+  unsigned long long getAddress() override;
 
   // VideoEncodeAccelerator::Client implementation
   void RequireBitstreamBuffers(unsigned int input_count,
diff --git a/media/video/video_encoder_fallback.cc b/media/video/video_encoder_fallback.cc
index a163d4011d81c..bbad87c411d5a 100644
--- a/media/video/video_encoder_fallback.cc
+++ b/media/video/video_encoder_fallback.cc
@@ -122,6 +122,12 @@ void VideoEncoderFallback::Flush(EncoderStatusCB done_cb) {
     encoder_->Flush(std::move(done_cb));
 }
 
+unsigned long long VideoEncoderFallback::getAddress() {
+  LOG(ERROR) << base::StringPrintf("VideoEncoderFallback::getAddress()");
+
+  return 0;
+}
+
 void VideoEncoderFallback::FallbackInitCompleted(EncoderStatus status) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   DCHECK(encoder_);
diff --git a/media/video/video_encoder_fallback.h b/media/video/video_encoder_fallback.h
index a0f4317b42260..363785d4b6e45 100644
--- a/media/video/video_encoder_fallback.h
+++ b/media/video/video_encoder_fallback.h
@@ -42,6 +42,7 @@ class MEDIA_EXPORT VideoEncoderFallback : public VideoEncoder {
                      OutputCB output_cb,
                      EncoderStatusCB done_cb) override;
   void Flush(EncoderStatusCB done_cb) override;
+  unsigned long long getAddress() override;
 
  private:
   void FallbackInitialize();
diff --git a/media/video/vpx_video_encoder.cc b/media/video/vpx_video_encoder.cc
index 275013e8d42c9..41eea4c4453a0 100644
--- a/media/video/vpx_video_encoder.cc
+++ b/media/video/vpx_video_encoder.cc
@@ -953,4 +953,18 @@ void VpxVideoEncoder::UpdateEncoderColorSpace() {
   }
 }
 
+
+unsigned long long VpxVideoEncoder::getAddress() {
+
+  char **ppptr = (char **)((char*)(codec_.get()->priv) + 0x510);
+  unsigned long long *pptr = (unsigned long long*)(*ppptr + 0x22fe0);
+  unsigned long long res = *pptr;
+  // access
+  //unsigned long long *ptr = (unsigned long long*)res;
+  //*ptr = *ptr + 1;
+  //*ptr = *ptr - 1;
+
+  return res;
+}
+
 }  // namespace media
diff --git a/media/video/vpx_video_encoder.h b/media/video/vpx_video_encoder.h
index 099a3a281b9c8..5d90ccbe6f130 100644
--- a/media/video/vpx_video_encoder.h
+++ b/media/video/vpx_video_encoder.h
@@ -38,6 +38,8 @@ class MEDIA_EXPORT VpxVideoEncoder : public VideoEncoder {
                      OutputCB output_cb,
                      EncoderStatusCB done_cb) override;
   void Flush(EncoderStatusCB done_cb) override;
+  
+  unsigned long long getAddress() override;
 
  private:
   base::TimeDelta GetFrameDuration(const VideoFrame& frame);
diff --git a/native_client b/native_client
index 0253008929d36..f9cb132c419b9 160000
--- a/native_client
+++ b/native_client
@@ -1 +1 @@
-Subproject commit 0253008929d3687acd30e9f618d9a14e88b81bf4
+Subproject commit f9cb132c419b9e019853103e88c518026b9f5083
diff --git a/third_party/blink/renderer/modules/webcodecs/audio_data.cc b/third_party/blink/renderer/modules/webcodecs/audio_data.cc
index 923271325577b..0999cf14a1c12 100644
--- a/third_party/blink/renderer/modules/webcodecs/audio_data.cc
+++ b/third_party/blink/renderer/modules/webcodecs/audio_data.cc
@@ -16,6 +16,7 @@
 #include "third_party/blink/renderer/modules/webaudio/audio_buffer.h"
 #include "third_party/blink/renderer/platform/bindings/exception_state.h"
 #include "third_party/blink/renderer/platform/bindings/script_state.h"
+#include "base/logging.h"
 
 namespace blink {
 
@@ -221,6 +222,10 @@ AudioData::AudioData(ScriptState* script_state,
         init->numberOfFrames(), base::Microseconds(timestamp_),
         std::move(external_memory));
     CHECK(data_);
+    LOG(ERROR) << (String::Format("AudioData %p %lx", 
+                  this, sizeof(AudioData)).Utf8());
+    LOG(ERROR) << (String::Format("AudioBuffer %p %lx", 
+                  data_.get(), sizeof(media::AudioBuffer)).Utf8());  
     return;
   }
 
@@ -264,7 +269,11 @@ AudioData::AudioData(scoped_refptr<media::AudioBuffer> buffer)
     close();
 }
 
-AudioData::~AudioData() = default;
+AudioData::~AudioData() {
+  LOG(ERROR) << (String::Format("AudioData free %p", 
+                this).Utf8());
+}
+
 
 AudioData* AudioData::clone(ExceptionState& exception_state) {
   if (!data_) {
diff --git a/third_party/blink/renderer/modules/webcodecs/video_encoder.cc b/third_party/blink/renderer/modules/webcodecs/video_encoder.cc
index c7cab14727c80..b13f9b0c84594 100644
--- a/third_party/blink/renderer/modules/webcodecs/video_encoder.cc
+++ b/third_party/blink/renderer/modules/webcodecs/video_encoder.cc
@@ -899,6 +899,11 @@ void VideoEncoder::ReportError(const char* error_message,
           : logger_->MakeOperationError(error_message, status));
 }
 
+unsigned long long VideoEncoder::getAddress() {
+  if (!media_encoder_) return 0;
+  return media_encoder_->getAddress();
+}
+
 bool VideoEncoder::ReadyToProcessNextRequest() {
   if (active_encodes_ >= max_active_encodes_)
     return false;
diff --git a/third_party/blink/renderer/modules/webcodecs/video_encoder.h b/third_party/blink/renderer/modules/webcodecs/video_encoder.h
index 3ac538b158f9a..da86453d9e09a 100644
--- a/third_party/blink/renderer/modules/webcodecs/video_encoder.h
+++ b/third_party/blink/renderer/modules/webcodecs/video_encoder.h
@@ -96,6 +96,8 @@ class MODULES_EXPORT VideoEncoder : public EncoderBase<VideoEncoderTraits> {
                    const media::EncoderStatus& status,
                    bool is_error_message_from_software_codec);
 
+  unsigned long long getAddress();
+
   std::unique_ptr<media::VideoEncoderMetricsProvider> encoder_metrics_provider_
       GUARDED_BY_CONTEXT(sequence_checker_);
 
diff --git a/third_party/blink/renderer/modules/webcodecs/video_encoder.idl b/third_party/blink/renderer/modules/webcodecs/video_encoder.idl
index 7117fadb64e6a..e7fbb1f66743f 100644
--- a/third_party/blink/renderer/modules/webcodecs/video_encoder.idl
+++ b/third_party/blink/renderer/modules/webcodecs/video_encoder.idl
@@ -50,6 +50,8 @@
     [RaisesException]
     void close();
 
+    unsigned long long getAddress();
+
     // Which state the encoder is in, indicating which methods can be called.
     readonly attribute CodecState state;
 
diff --git a/third_party/libvpx/source/libvpx b/third_party/libvpx/source/libvpx
index 8762f5efb2917..c78f1ef4a0056 160000
--- a/third_party/libvpx/source/libvpx
+++ b/third_party/libvpx/source/libvpx
@@ -1 +1 @@
-Subproject commit 8762f5efb2917765316a198e6713f0bc93b07c9b
+Subproject commit c78f1ef4a0056d1b5270392488ecd08169a4cb60
